// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace DapperPerfTest.EFCore6.Scaffold
{
    internal partial class OrderEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "DapperPerfTest.EFCore6.Scaffold.Order",
                typeof(Order),
                baseEntityType);

            var orderId = runtimeEntityType.AddProperty(
                "OrderId",
                typeof(int),
                propertyInfo: typeof(Order).GetProperty("OrderId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<OrderId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            orderId.AddAnnotation("Relational:ColumnName", "OrderID");
            orderId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var customerId = runtimeEntityType.AddProperty(
                "CustomerId",
                typeof(string),
                propertyInfo: typeof(Order).GetProperty("CustomerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<CustomerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 5);
            customerId.AddAnnotation("Relational:ColumnName", "CustomerID");
            customerId.AddAnnotation("Relational:IsFixedLength", true);
            customerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var employeeId = runtimeEntityType.AddProperty(
                "EmployeeId",
                typeof(int?),
                propertyInfo: typeof(Order).GetProperty("EmployeeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<EmployeeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            employeeId.AddAnnotation("Relational:ColumnName", "EmployeeID");
            employeeId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var freight = runtimeEntityType.AddProperty(
                "Freight",
                typeof(decimal?),
                propertyInfo: typeof(Order).GetProperty("Freight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<Freight>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueGenerated: ValueGenerated.OnAdd);
            freight.AddAnnotation("Relational:ColumnType", "money");
            freight.AddAnnotation("Relational:DefaultValueSql", "((0))");
            freight.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var orderDate = runtimeEntityType.AddProperty(
                "OrderDate",
                typeof(DateTime?),
                propertyInfo: typeof(Order).GetProperty("OrderDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<OrderDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            orderDate.AddAnnotation("Relational:ColumnType", "datetime");
            orderDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var requiredDate = runtimeEntityType.AddProperty(
                "RequiredDate",
                typeof(DateTime?),
                propertyInfo: typeof(Order).GetProperty("RequiredDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<RequiredDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            requiredDate.AddAnnotation("Relational:ColumnType", "datetime");
            requiredDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shipAddress = runtimeEntityType.AddProperty(
                "ShipAddress",
                typeof(string),
                propertyInfo: typeof(Order).GetProperty("ShipAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 60);
            shipAddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shipCity = runtimeEntityType.AddProperty(
                "ShipCity",
                typeof(string),
                propertyInfo: typeof(Order).GetProperty("ShipCity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipCity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 15);
            shipCity.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shipCountry = runtimeEntityType.AddProperty(
                "ShipCountry",
                typeof(string),
                propertyInfo: typeof(Order).GetProperty("ShipCountry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipCountry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 15);
            shipCountry.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shipName = runtimeEntityType.AddProperty(
                "ShipName",
                typeof(string),
                propertyInfo: typeof(Order).GetProperty("ShipName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 40);
            shipName.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shipPostalCode = runtimeEntityType.AddProperty(
                "ShipPostalCode",
                typeof(string),
                propertyInfo: typeof(Order).GetProperty("ShipPostalCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipPostalCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 10);
            shipPostalCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shipRegion = runtimeEntityType.AddProperty(
                "ShipRegion",
                typeof(string),
                propertyInfo: typeof(Order).GetProperty("ShipRegion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipRegion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 15);
            shipRegion.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shipVia = runtimeEntityType.AddProperty(
                "ShipVia",
                typeof(int?),
                propertyInfo: typeof(Order).GetProperty("ShipVia", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipVia>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipVia.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var shippedDate = runtimeEntityType.AddProperty(
                "ShippedDate",
                typeof(DateTime?),
                propertyInfo: typeof(Order).GetProperty("ShippedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShippedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shippedDate.AddAnnotation("Relational:ColumnType", "datetime");
            shippedDate.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { orderId });
            runtimeEntityType.SetPrimaryKey(key);

            var customerID = runtimeEntityType.AddIndex(
                new[] { customerId },
                name: "CustomerID");

            var customersOrders = runtimeEntityType.AddIndex(
                new[] { customerId },
                name: "CustomersOrders");

            var employeeID = runtimeEntityType.AddIndex(
                new[] { employeeId },
                name: "EmployeeID");

            var employeesOrders = runtimeEntityType.AddIndex(
                new[] { employeeId },
                name: "EmployeesOrders");

            var orderDate0 = runtimeEntityType.AddIndex(
                new[] { orderDate },
                name: "OrderDate");

            var shipPostalCode0 = runtimeEntityType.AddIndex(
                new[] { shipPostalCode },
                name: "ShipPostalCode");

            var shippedDate0 = runtimeEntityType.AddIndex(
                new[] { shippedDate },
                name: "ShippedDate");

            var shippersOrders = runtimeEntityType.AddIndex(
                new[] { shipVia },
                name: "ShippersOrders");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CustomerId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("CustomerId")! })!,
                principalEntityType);

            var customer = declaringEntityType.AddNavigation("Customer",
                runtimeForeignKey,
                onDependent: true,
                typeof(Customer),
                propertyInfo: typeof(Order).GetProperty("Customer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<Customer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var orders = principalEntityType.AddNavigation("Orders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Order>),
                propertyInfo: typeof(Customer).GetProperty("Orders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Customer).GetField("<Orders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Orders_Customers");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EmployeeId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("EmployeeId")! })!,
                principalEntityType);

            var employee = declaringEntityType.AddNavigation("Employee",
                runtimeForeignKey,
                onDependent: true,
                typeof(Employee),
                propertyInfo: typeof(Order).GetProperty("Employee", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<Employee>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var orders = principalEntityType.AddNavigation("Orders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Order>),
                propertyInfo: typeof(Employee).GetProperty("Orders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Employee).GetField("<Orders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Orders_Employees");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ShipVia")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ShipperId")! })!,
                principalEntityType);

            var shipViaNavigation = declaringEntityType.AddNavigation("ShipViaNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(Shipper),
                propertyInfo: typeof(Order).GetProperty("ShipViaNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Order).GetField("<ShipViaNavigation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var orders = principalEntityType.AddNavigation("Orders",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<Order>),
                propertyInfo: typeof(Shipper).GetProperty("Orders", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Shipper).GetField("<Orders>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Orders_Shippers");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Orders");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
